from asyncio import sleep
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ForceReply, CallbackQuery
from pyrogram.errors import FloodWait
import humanize
import random
from helpo.txt import mr
from helpo.database import db
from config import START_PIC, FLOOD, ADMIN 
import pyromod
from config import Bot_Username
from config import API_ID, API_HASH, BOT_TOKEN, FORCE_SUB
from helpo.database import db
import asyncio 
from plugins.cb_data import manager , get_manager


#___________________________________________________________New Data______________________________________________________

from asyncio import sleep
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ForceReply, CallbackQuery
from pyrogram.errors import FloodWait
import humanize
import random
from helpo.txt import mr
from helpo.database import db
from config import START_PIC, FLOOD, ADMIN 
import pyromod
from config import Bot_Username
from config import API_ID, API_HASH, BOT_TOKEN, FORCE_SUB
from helpo.database import db
import asyncio 
from plugins.cb_data import manager , get_manager
from asyncio.exceptions import TimeoutError
from pyrogram.errors import (
    ApiIdInvalid,
    PhoneNumberInvalid,
    PhoneCodeInvalid,
    PhoneCodeExpired,
    SessionPasswordNeeded,
    PasswordHashInvalid
)

from telethon.errors import (
    ApiIdInvalidError,
    PhoneNumberInvalidError,
    PhoneCodeInvalidError,
    PhoneCodeExpiredError,
    SessionPasswordNeededError,
    PasswordHashInvalidError
)

#____________________________________________ Finish _______________________________________


St_Session = {}
Forward_Collection = {}

@Client.on_message(filters.private & filters.command(["connect"]))
async def gen(client, message):
    user = message.from_user
    if not await db.is_user_exist(user.id):
        await db.add_user(user.id)
    s = Client('gen', api_id=API_ID, api_hash=API_HASH, in_memory=True)
    await s.connect()
    phone_no = await client.ask(text ="Send Your Phone No in `+917679XXX` Format",chat_id = message.chat.id)
    phone_no = phone_no.text
    user_id = message.chat.id
    try:
        code = await s.send_code(phone_no)
    except (ApiIdInvalid, ApiIdInvalidError):
        await message.reply('`API_ID` and `API_HASH` combination is invalid. Please start generating session again.')
        return
    except (PhoneNumberInvalid, PhoneNumberInvalidError):
        await message.reply('`PHONE_NUMBER` is invalid. Please start generating session again.')
        return
    try:
        phone_code_msg = None
        phone_code_msg = await client.ask(user_id, "Please check for an OTP in official telegram account. If you got it, send OTP here after reading the below format. \nIf OTP is `12345`, **please send it as** `1 2 3 4 5`.", timeout=600)            
    except TimeoutError:
        await message.reply('Time limit reached of 10 minutes. Please start generating session again.')
        return
    phone_code = phone_code_msg.text.replace(" ", "")
    try:
        await s.sign_in(phone_no, code.phone_code_hash, phone_code)
    except (PhoneCodeInvalid, PhoneCodeInvalidError):
        await message.reply('OTP is invalid. Please start generating session again.')
        return
    except (PhoneCodeExpired, PhoneCodeExpiredError):
        await message.reply('OTP is expired. Please start generating session again.')
        return
    except (SessionPasswordNeeded, SessionPasswordNeededError):
        try:
            two_step_msg = await client.ask(user_id, 'Your account has enabled two-step verification. Please provide the password.', timeout=300)            
        except TimeoutError:
            await message.reply('Time limit reached of 5 minutes. Please start generating session again.')
            return
        try:
            password = two_step_msg.text
            await s.check_password(password=password)
        except (PasswordHashInvalid, PasswordHashInvalidError):
                await two_step_msg.reply('Invalid Password Provided. Please start generating session again.')
                return
    string_session = await s.export_session_string()  
    text = f"**Pyrogram STRING SESSION** \n\n`{string_session}` \n\nGenerated by {Bot_Username}"
    try:
        await s.send_message("me", text)
    except KeyError:
        pass
    await s.disconnect()
    
    global St_Session
    St_Session[message.from_user.id] = string_session
    return await message.reply("Saved Now Use /rename")







async def savforward(message,Forward):    
    print("Inside Db Code")
    try:
        z = await db.set_forward(message.from_user.id,Forward)    
    except Exception as e:
        print(e)
    print("Save Complete Code")


    

@Client.on_message(filters.private & filters.command(["rename"]))
async def start(client, message):
    user = message.from_user
    if not await db.is_user_exist(user.id):
        await db.add_user(user.id)
    global St_Session
    if message.from_user.id in St_Session:
        try:
            String_Session = St_Session[message.from_user.id]
            ubot = Client("Urenamer", session_string=String_Session, api_id=API_ID, api_hash=API_HASH)
            print("Ubot Connected")
        except Exception as e:
            print(e)
            return await message.reply("String Session Not Connected!! ,Use /connect")
    else:
        return await message.reply("String Session Not Connected!! ,Use /connect")
    await ubot.start()
    chat_id = await client.ask(text ="Send Channel Id From Where You Want To Forward in `-100XXXX` Format ",chat_id = message.chat.id)
    chat_id = chat_id.text
    chat_id = int(chat_id)
    Forward  = await client.ask(text ="Send Channel Id In Which You Want Renamed Files To Be Sent in `-100XXXX` Format ",chat_id = message.chat.id)
    Forward = Forward.text
    Forward = int(Forward)
    await savforward(message,Forward)
    
    msg_id = await client.ask(text ="Send Start Message Link ",chat_id = message.chat.id)
    msg_id = msg_id.text
    msg_id = msg_id.split("/")[-1]
    msg_id = int(msg_id)

    for i in range(msg_id,msg_id+5):
        messages = await ubot.get_messages(chat_id=chat_id,message_ids=i)
        try:
            await asyncio.sleep(3)
            x = msg_id + 5
            y = msg_id +6
            while True:  
                # print("Stuck In Loop")
                await asyncio.sleep(20)
                try:
                    handler = get_manager()
                    value = handler[message.from_user.id]
                except Exception as e:
                    # print(e)
                    pass
                if i == msg_id:
                    value = True
                if value == True:
                    break 
                
            await messages.copy(Bot_Username)
        except Exception as e:
            print(e)
            pass
        try:
            await client.delete_messages(chat_id = chat_id, message_ids=i)
        except Exception as e:
            print(e)
            pass
        manager(message.from_user.id,False)
    await ubot.stop()
